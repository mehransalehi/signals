// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Role {
  User
  Admin
}

enum Side {
  Long
  Short
}

enum SignalStatus {
  Enable
  Disable
}

model User {
  id        String   @id @default(cuid()) // Primary key
  name      String?  // Optional name
  email     String   @unique // Unique email address
  role      Role     @default(User) // Default role is 'User'
  token     String?  // Optional token
  password  String
  createdAt DateTime @default(now()) // Timestamp with default current time
  updatedAt DateTime @updatedAt // Automatically set to current time on update

  userSettings UserSettings[] // One-to-many relation
  signals     Signal[] // One-to-many relation
  posts       Post[] // One-to-many relation
  newsletters Newsletter[] // One-to-many relation
  siteSettings SiteSettings? // One-to-one relation
  contacts     Contact[] // One-to-many relation
  orders       Order[] // One-to-many relation
  postComments  PostComment[] // One-to-many relation
}

model UserSettings {
  id        String   @id @default(cuid()) // Primary key
  autotrade Boolean  @default(false) // Boolean column with a default value
  userId    String   @unique // Foreign key referencing User, must be unique

  user      User     @relation(fields: [userId], references: [id]) // Foreign key relation
  createdAt DateTime @default(now()) // Timestamp with default current time
  updatedAt DateTime @updatedAt // Automatically set to current time on update
}

model Signal {
  id         String         @id @default(cuid()) // Primary key
  symbol     String // Crypto symbol
  side       Side
  leverage   Int
  entryMin   Float
  entryMax   Float? // Optional entry maximum
  profit     String
  stopLoss   Float
  messageId  String
  text       String
  channel    String
  status     SignalStatus @default(Disable) // Default status is 'Disable'
  userId     String // Foreign key referencing User
  createdAt  DateTime @default(now()) // Timestamp with default current time
  updatedAt  DateTime @updatedAt // Automatically set to current time on update

  user       User        @relation(fields: [userId], references: [id]) // Foreign key relation
  orders     Order[] // One-to-many relation
}

model Order {
  id        String   @id @default(cuid()) // Primary key
  details   String? // Optional details
  signalId  String // Foreign key referencing Signal
  userId    String // Foreign key referencing User
  createdAt DateTime @default(now()) // Timestamp with default current time
  updatedAt DateTime @updatedAt // Automatically set to current time on update

  signal    Signal @relation(fields: [signalId], references: [id]) // Foreign key relation
  user      User @relation(fields: [userId], references: [id]) // Foreign key relation
}

model Post {
  id          String   @id @default(cuid()) // Primary key
  title       String? // Optional title
  text        String? // Optional text
  tags        String? // Optional tags
  img         String? // Optional image
  postgroupId String? // Optional post group ID
  userId      String // Foreign key referencing User
  createdAt   DateTime @default(now()) // Timestamp with default current time
  updatedAt   DateTime @updatedAt // Automatically set to current time on update

  user        User @relation(fields: [userId], references: [id]) // Foreign key relation
  postGroup   PostGroup? @relation(fields: [postgroupId], references: [id]) // Foreign key relation
  comments    PostComment[] // One-to-many relation
}

model PostComment {
  id        String   @id @default(cuid()) // Primary key
  text      String? // Optional text
  postId    String // Foreign key referencing Post
  userId    String // Foreign key referencing User
  createdAt DateTime @default(now()) // Timestamp with default current time
  updatedAt DateTime @updatedAt // Automatically set to current time on update

  post      Post @relation(fields: [postId], references: [id]) // Foreign key relation
  user      User @relation(fields: [userId], references: [id]) // Foreign key relation
}

model PostGroup {
  id        String   @id @default(cuid()) // Primary key
  order     Int? // Optional order
  title     String? // Optional title
  createdAt DateTime @default(now()) // Timestamp with default current time
  updatedAt DateTime @updatedAt // Automatically set to current time on update

  posts     Post[] // One-to-many relation
}

model Newsletter {
  id        String   @id @default(cuid()) // Primary key
  email     String
  userId    String // Foreign key referencing User
  createdAt DateTime @default(now()) // Timestamp with default current time
  updatedAt DateTime @updatedAt // Automatically set to current time on update

  user      User @relation(fields: [userId], references: [id]) // Foreign key relation
}

model SiteSettings {
  id        String   @id @default(cuid()) // Primary key
  address   String? // Optional address
  phone     String? // Optional phone number
  email     String? // Optional email
  instagram String? // Optional Instagram
  twitter   String? // Optional Twitter
  github    String? // Optional GitHub
  userId    String @unique // Foreign key referencing User, must be unique
  createdAt DateTime @default(now()) // Timestamp with default current time
  updatedAt DateTime @updatedAt // Automatically set to current time on update

  user      User @relation(fields: [userId], references: [id]) // Foreign key relation
}

model Contact {
  id        String   @id @default(cuid()) // Primary key
  name      String
  email     String
  message   String
  userId    String // Foreign key referencing User
  createdAt DateTime @default(now()) // Timestamp with default current time
  updatedAt DateTime @updatedAt // Automatically set to current time on update

  user      User @relation(fields: [userId], references: [id]) // Foreign key relation
}
